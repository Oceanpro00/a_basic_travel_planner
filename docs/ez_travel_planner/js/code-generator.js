/* ==================================================
   CODE GENERATOR - CREATES TRIPDATA.JS FILES
   ================================================== */

/* ==================================================
   MAIN CODE GENERATION
   ================================================== */

function generateCode() {
    const tripTitle = document.getElementById('tripTitle').value.trim() || 'My Amazing Trip';
    const pathPoints = collectPathPointsData();
    const activities = collectActivitiesData();
    
    let code = generateHeader(tripTitle);
    code += generatePathPointsCode(pathPoints);
    code += generateActivitiesCode(activities);
    
    // Pretty print the code
    const prettyCode = prettifyCode(code);
    document.getElementById('generatedCode').textContent = prettyCode;
    
    // Save to localStorage for map integration
    localStorage.setItem('currentTripCode', code);
    
    return code;
}

function prettifyCode(code) {
    // Simple code prettifier - adds proper indentation
    const lines = code.split('\n');
    let indentLevel = 0;
    const indentSize = 2;
    
    return lines.map(line => {
        const trimmed = line.trim();
        
        // Skip empty lines and comments
        if (!trimmed || trimmed.startsWith('//')) {
            return trimmed;
        }
        
        // Decrease indent for closing brackets/parentheses
        if (trimmed.includes(');') || trimmed === '}') {
            indentLevel = Math.max(0, indentLevel - 1);
        }
        
        const indent = ' '.repeat(indentLevel * indentSize);
        const result = indent + trimmed;
        
        // Increase indent for opening brackets or function calls
        if (trimmed.includes('(') && !trimmed.includes(');')) {
            indentLevel++;
        }
        
        return result;
    }).join('\n');
}

function generateHeader(tripTitle) {
    return `// tripData.js
const tripTitle = "${escapeString(tripTitle)}";

// Generated by Travel Planner at ${new Date().toLocaleString()}
// Place this file in your /map/ folder for live map integration

`;
}

function generatePathPointsCode(pathPoints) {
    if (!pathPoints || pathPoints.length === 0) {
        return '// No path points added yet\n\n';
    }

    let code = `// PATH POINTS (${pathPoints.length} locations)\n`;
    pathPoints.forEach((point, index) => {
        const photos = point.photos && point.photos.length > 0 ? 
            `[${point.photos.map(p => `"${escapeString(p)}"`).join(', ')}]` : '[]';
        
        // Handle hotels array
        const hotels = point.hotels && point.hotels.length > 0 ? 
            `[${point.hotels.map(hotel => generateHotelObject(hotel)).join(', ')}]` : '[]';
        
        code += `addPathPoint(${point.lat}, ${point.lng}, "${escapeString(point.name)}", "${escapeString(point.description || '')}", ${photos}, "${escapeString(point.link || '')}", ${hotels});\n`;
    });
    
    return code + '\n';
}

function generateHotelObject(hotel) {
    const photos = hotel.photos && hotel.photos.length > 0 ? 
        `[${hotel.photos.map(p => `"${escapeString(p)}"`).join(', ')}]` : '[]';
    const roomPhotos = hotel.roomPhotos && hotel.roomPhotos.length > 0 ? 
        `[${hotel.roomPhotos.map(p => `"${escapeString(p)}"`).join(', ')}]` : '[]';
    
    return `{
        name: "${escapeString(hotel.name || '')}",
        type: "${escapeString(hotel.type || '')}",
        description: "${escapeString(hotel.description || '')}",
        photos: ${photos},
        roomPhotos: ${roomPhotos},
        link: "${escapeString(hotel.link || '')}"
    }`;
}

function generateActivitiesCode(activities) {
    if (!activities || activities.length === 0) {
        return '// No activities added yet\n';
    }

    let code = `// ACTIVITIES (${activities.length} items)\n`;
    
    // Group activities by type for better organization
    const groupedActivities = {};
    activities.forEach(activity => {
        const type = activity.type || 'activity';
        if (!groupedActivities[type]) {
            groupedActivities[type] = [];
        }
        groupedActivities[type].push(activity);
    });
    
    // Generate code for each type
    Object.keys(groupedActivities).forEach(type => {
        const typeActivities = groupedActivities[type];
        const typeInfo = ACTIVITY_TYPES[type];
        const typeName = typeInfo ? typeInfo.title : type;
        
        code += `\n// ${typeName.toUpperCase()}S\n`;
        
        typeActivities.forEach(activity => {
            const photos = activity.photos && activity.photos.length > 0 ? 
                `[${activity.photos.map(p => `"${escapeString(p)}"`).join(', ')}]` : '[]';
            
            const funcName = {
                'activity': 'addActivity',
                'mustdo': 'addMustDo', 
                'food': 'addFood',
                'cafe': 'addCafe'
            }[activity.type] || 'addActivity';
            
            code += `${funcName}(${activity.lat}, ${activity.lng}, "${escapeString(activity.name)}", "${escapeString(activity.category || '')}", ${photos}, "${escapeString(activity.link || '')}", "${escapeString(activity.description || '')}");\n`;
        });
    });
    
    return code;
}

/* ==================================================
   COPY & DOWNLOAD FUNCTIONS
   ================================================== */

function copyCode() {
    const code = generateCode();
    
    if (navigator.clipboard && window.isSecureContext) {
        navigator.clipboard.writeText(code).then(() => {
            showToast('Code copied to clipboard!', 'success');
        }).catch(() => {
            fallbackCopyCode(code);
        });
    } else {
        fallbackCopyCode(code);
    }
}

function fallbackCopyCode(text) {
    const textArea = document.createElement('textarea');
    textArea.value = text;
    textArea.style.position = 'fixed';
    textArea.style.left = '-999999px';
    textArea.style.top = '-999999px';
    document.body.appendChild(textArea);
    textArea.focus();
    textArea.select();
    
    try {
        document.execCommand('copy');
        showToast('Code copied to clipboard!', 'success');
    } catch (err) {
        console.error('Failed to copy:', err);
        showToast('Failed to copy. Please select and copy manually.', 'error');
    }
    
    document.body.removeChild(textArea);
}

function downloadTripData() {
    const code = generateCode();
    const tripTitle = document.getElementById('tripTitle').value.trim() || 'my-trip';
    
    // Create filename from trip title
    const filename = sanitizeFilename(tripTitle) + '.tripdata.js';
    
    const blob = new Blob([code], { type: 'text/javascript' });
    const url = URL.createObjectURL(blob);
    
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    URL.revokeObjectURL(url);
    showToast(`${filename} downloaded! Place it in your /map/ folder.`, 'success', 5000);
}

/* ==================================================
   HELPER FUNCTIONS
   ================================================== */

function sanitizeFilename(name) {
    return name
        .replace(/[^a-z0-9\s-]/gi, '')
        .replace(/\s+/g, '-')
        .replace(/-+/g, '-')
        .toLowerCase()
        .trim()
        .substring(0, 50) || 'my-trip';
}

function escapeString(str) {
    if (typeof str !== 'string') return '';
    return str
        .replace(/\\/g, '\\\\')
        .replace(/"/g, '\\"')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/\t/g, '\\t');
}